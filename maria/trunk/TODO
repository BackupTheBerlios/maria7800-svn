- The build process is still not terribly good. There are a number
  of problems with it:
  - rundir : build process copies stuff into rundir. This is not good,
    because during a VPATH build the build process shouldn't write
    anything into the source tree, but rundir IS in the source tree
    => needs to be fixed
  - rundir again : it's bullshit to keep it under version control
  - rundir again : it's also crap to run every testassembly in the
    same directory, as this will overwrite the previous TestResult.xml.
    Not that I care much about this file, but nevertheless.
  - Even if the copy operations when an assembly has been built would
    copy into the build tree, they would somehow still suck.

  Proposition : don't copy stuff anywhere. Run testassemblies in
  the directory they have been built. Just add everxy directory in the
  src tree to MONO_PATH before running nunit-console, and everything
  should be fine :D

  So:
  - remove rundir from svn
  - modify runtests. Now it should get an assembly name (basename only)
    which it can expect to be found in the current directory.
    before throwing it at nunit-console, it should put together the
    MONO_PATH. In order for a VPATH build to work we must search
    $(top_builddir)/src for subdirectories and add these to MONO_PATH.
    This should get the job done for the moment, methinks.
  - Fix the following Makefile.am's
	./src/Maria.Core/Makefile.am
	./src/Maria/Makefile.am
	./src/Vtg.Util.Test/Makefile.am
	./src/Vtg.Util/Makefile.am
	./src/Maria.Core.Test/Makefile.am
    => here we remove the copy operations and then adjust the runtest.sh
    invocations

- Next : finish AddressSpace class.
- Build process:
  - Add dependencies between referencing/referenced assemblies
    Can do that when we have fixed the stuff with the output thingy.
    Or so. Oh well, don't care too much, really.
- Look at AddressSpace class: are there places where
  ArgumentCheck might make sense ?
- Port AddressSpace class now. This involves:
  - Creating a dummy Machine class. This will work, since
    the AddressSpace just stores the reference, but never
    uses it (so it shouldn't have it at all, technically...)
  - The two Map methods can be unified, since the interface
    to support both of them is now unified in IDevice.
  - Perhaps the snooper thingy could be more bulletproof, or more versatile:
    - Either check wether already a snooper is set, and if so, throw (when setting it again)
    - Or allow N snoopers. Don't know wether this will be necessary, though.
- Learn how to tag stuff, and tag the ORIGINAL emu7800 source code
  in the repository with 0.71 or somesuch.
- Raise warning level when compiling ?
- We could also go and port the disassembler...the thing doesn't
  seem to use too much other stuff ?
  => nope...needs the AddressSpace and the Machine/CPU classes (?)
---
Stuff to clean up:
- Duplicated code (offset calculation) in MD5.cs and GameSettings.cs
- Does GameSettings really need that many getters/setters ?
  (Nah. Probably it could happily be an immutable)

