- fix build process first...I wonder wether using templates would be feasible
  we'll see. => nah. anyway, there won't be much more templates, methinks,
  so do we really want to add an additional predingsa step ? I don't
  really think so...
- Next : finish AddressSpace class.
- Build process:
  - Copy every assembly to rundir. Affects the following files:
	./src/Maria.Core/Makefile.am		!
	./src/Maria/Makefile.am
	./src/Vtg.Util.Test/Makefile.am
	./src/Vtg.Util/Makefile.am
	./src/Maria.Core.Test/Makefile.am
  - Anyway, we can probably greatly simplify these Makefile.am's
    by using automake templates (Makefile.am skeletons included
    into other Makefile.am's). As we've seen, make allows even
    variable substitutions INSIDE VARIABLE NAMES. If automake
    allows that too, then we can do some neat template which
    we can use to compile all our libraries/exe's. Perhaps
    tests need additional support, but that's ok.
  - Add dependencies between referencing/referenced assemblies
    Can do that when we have fixed the stuff with the output thingy.
    Or so. Oh well, don't care too much, really.
- Look at AddressSpace class: are there places where
  ArgumentCheck might make sense ?
- Port AddressSpace class now. This involves:
  - Creating a dummy Machine class. This will work, since
    the AddressSpace just stores the reference, but never
    uses it (so it shouldn't have it at all, technically...)
  - The two Map methods can be unified, since the interface
    to support both of them is now unified in IDevice.
  - Perhaps the snooper thingy could be more bulletproof, or more versatile:
    - Either check wether already a snooper is set, and if so, throw (when setting it again)
    - Or allow N snoopers. Don't know wether this will be necessary, though.
- Learn how to tag stuff, and tag the ORIGINAL emu7800 source code
  in the repository with 0.71 or somesuch.
- Raise warning level when compiling ?
- We could also go and port the disassembler...the thing doesn't
  seem to use too much other stuff ?
  => nope...needs the AddressSpace and the Machine/CPU classes (?)
---
Stuff to clean up:
- Duplicated code (offset calculation) in MD5.cs and GameSettings.cs
- Does GameSettings really need that many getters/setters ?
  (Nah. Probably it could happily be an immutable)

