- The RomProperties class might be a neat candidate too.
  Here we should add a few unixish things:
  - We keep a system wide and a user RomProperties.csv file.
  - The system-wide file is in the pkglibdir, so we can find
    it by getting maria.exe's directory.
  - The user file is in the user's home directory, don't know
    where exactly, though. perhaps in a ~/.maria directory ?
  - At startup we first read in the system-wide RomProperties.
    When we have it, we read the user RomProperties file. Any
    entries in the user-file that have the same MD5 sum as
    entries in the system-wide file will override those in
    the system-wide file. Pretty simple, isn't it ?
    => actually we don't do it at startup, lazy construction
       might make more sense in this particular case.
  - It might be a good idea not to crash the application
    when reading romproperties goes wrong. config files 
    disappear all the time, so if they aren't there, we
    should try to run without them...
- Currently we simply use Tao assemblies built for 1.1
  is this a good thing (what if the target framework is 2.0 ?)
- Possibly we can work on the Cart classes.
  - I think I'll port the remaining carts and then
    worry about refactoring them.
- Build process:
  - At some point we should perhaps keep referenced assemblies
    as dependencies of the assembly that should be built.
- Learn how to tag stuff, and tag the ORIGINAL emu7800 source code
  in the repository with 0.71 or somesuch.
- Raise warning level when compiling ?
- At some point search for \n sequences in source code and
  replace them by Environment.NewLine. Or so. Oh well.
---
Stuff to clean up:
- The whole Cart base/concrete class business looks a bit odd to me
- Duplicated code (offset calculation) in MD5.cs and GameSettings.cs
- Does GameSettings really need that many getters/setters ?
  (Nah. Probably it could happily be an immutable)
- Odd that AddressSpace owns a Machine reference, because it never uses it...
- The CommandLine class looks odd too:
  - Why isn't Parameter a class ? Would make things simpler.
  - Why isn't CommandLine.Parms an IList instead of an array ?
    CommandLine class itself could have a strongly typed string indexer...
